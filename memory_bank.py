import os
from langchain_chroma import Chroma
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain.schema import Document
from datetime import datetime

# ------------------------
# 1. C·∫•u h√¨nh
# ------------------------

CHROMA_DIR = "./chroma_db"  # Th∆∞ m·ª•c l∆∞u tr·ªØ d·ªØ li·ªáu vector

# ------------------------
# 2. Kh·ªüi t·∫°o Embedding
# ------------------------
embeddings = GoogleGenerativeAIEmbeddings(
    model="models/embedding-001", google_api_key=GEMINI_API_KEY
)

# ------------------------
# 3. K·∫øt n·ªëi t·ªõi Chroma (t·ª± ƒë·ªông load l·∫°i d·ªØ li·ªáu n·∫øu ƒë√£ t·ªìn t·∫°i)
# ------------------------
vector_store = Chroma(
    collection_name="memory_bank",
    persist_directory=CHROMA_DIR,
    embedding_function=embeddings
)

# ------------------------
# 4. Th√™m d·ªØ li·ªáu v√†o Memory Bank
# ------------------------
def add_memory(content: str, metadata: dict = None):
    """
    L∆∞u m·ªôt th√¥ng tin m·ªõi v√†o Memory Bank.
    metadata c√≥ th·ªÉ ch·ª©a ki·ªÉu d·ªØ li·ªáu, ng√†y l∆∞u, user_id,...
    """
    if metadata is None:
        metadata = {}
    metadata["timestamp"] = datetime.now().isoformat()

    doc = Document(page_content=content, metadata=metadata)
    vector_store.add_documents([doc])
    vector_store.persist()
    print(f"‚úÖ ƒê√£ l∆∞u v√†o Memory Bank: {content[:60]}...")

# ------------------------
# 5. T√¨m ki·∫øm trong Memory Bank
# ------------------------
def search_memory(query: str, k: int = 3):
    """
    Truy v·∫•n th√¥ng tin t·ª´ Memory Bank d·ª±a tr√™n ƒë·ªô t∆∞∆°ng ƒë·ªìng ng·ªØ nghƒ©a.
    """
    results = vector_store.similarity_search(query, k=k)
    return results

# ------------------------
# 6. X√≥a d·ªØ li·ªáu
# ------------------------
def clear_memory():
    """
    X√≥a to√†n b·ªô d·ªØ li·ªáu trong Memory Bank.
    """
    vector_store.delete_collection()
    print("üóë Memory Bank ƒë√£ b·ªã x√≥a s·∫°ch.")

